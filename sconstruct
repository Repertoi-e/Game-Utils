debug             = ARGUMENTS.get('debug', 0)
enable_sanitizers = ARGUMENTS.get('sanitize', 0)

cpp_flags = ['-Wall', '-Wno-unused-variable', '-fno-exceptions',
             '-fno-unwind-tables', '-fno-threadsafe-statics']
cxx_flags = ['-fno-cxx-exceptions', '-std=c++17']
linker_flags = ['-m64']

env = Environment()
env.Append(CPPFLAGS  = cpp_flags)
env.Append(CXXFLAGS  = cxx_flags)
env.Append(LINKFLAGS = linker_flags)
env.Append(LIBPATH   = [''])
env.Append(LIBS      = ['c'])

env['CC'] = 'zapcc'
env['CXX'] = 'zapcc++'

if bool(debug):
    if bool(enable_sanitizers):
        env['CC'] = 'clang'
        env['CC'] = 'clang++'
        env.Append(CPPFLAGS = ['-fsanitize=address'])
    env.Append(CPPFLAGS = ['-g', '-O0'])
    build_dir = 'bin/debug'
else:
    env.Append(CPPDEFINES = ['NDEBUG'])
    env.Append(CPPFLAGS   = ['-O3'])
    build_dir = 'bin/release'


Export('env', 'build_dir')

# Put all .sconsign files in one place
env.SConsignFile()

project = 'game-utils'
game_utils_lib = SConscript(project + '/sconscript', exports = ['project'])

project = 'game-utils-test'
SConscript(project + '/sconscript', exports = ['project', 'game_utils_lib'])
